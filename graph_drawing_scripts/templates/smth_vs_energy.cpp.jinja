#include <vector>

#include <TGraphErrors.h>
#include <TAxis.h>
#include <TCanvas.h>
#include <TLegend.h>

int {{ script_name }}()
{
    TCanvas canv;
    std::vector<double> zeroes(100, 0.0);
    // ********************* Start of Data ********************* //
{% for season in seasons %}
    //{{ season['name'] }}
    {{ season['energy'] }}
    {{ season['val'] }}
    {{ season['val_err'] }}
{% endfor %}
    // ********************* End of Data ********************* //

{% for season in seasons %}
    //{{ season['name'] }}
    TGraphErrors {{ val_name }}_vs_energy_{{season['name']}}(energy_{{season['name']}}.size(), energy_{{season['name']}}.data(), {{ val_name }}_{{season['name']}}.data(), 
                                            zeroes.data(), {{ val_name }}_err_{{season['name']}}.data());
    {{ val_name }}_vs_energy_{{season['name']}}.GetXaxis()->SetLimits(915, 1010);
    {{ val_name }}_vs_energy_{{season['name']}}.GetYaxis()->SetLimits(-0.1, 5);
    {{ val_name }}_vs_energy_{{season['name']}}.SetMarkerColor({{loop.index + (60 if loop.index in [5, 7] else 0 )}});
    {{ val_name }}_vs_energy_{{season['name']}}.SetName("{{ val_name }}_vs_energy_{{season['name']}}");
    {{ val_name }}_vs_energy_{{season['name']}}.GetXaxis()->SetTitle("E_{beam}, MeV");
    {{ val_name }}_vs_energy_{{season['name']}}.GetYaxis()->SetTitle("{{ y_axis_title }}");
    {{ val_name }}_vs_energy_{{season['name']}}.SetTitle("{{ title }}");
{% endfor %}
{% for season in seasons %}
    {{ val_name }}_vs_energy_{{season['name']}}.DrawClone("{{'AP' if loop.index0 == 0 else 'P same'}}");{% endfor %}

    auto legend = new TLegend(0.1,0.7,0.48,0.9);
    legend->SetHeader("Seasons","C"); // option "C" allows to center the header
{% for season in seasons %}
    legend->AddEntry("{{ val_name }}_vs_energy_{{season['name']}}","{{season['name']}}","ep");{% endfor %}
    legend->DrawClone();

    canv.DrawClone();
    return 0;
}
